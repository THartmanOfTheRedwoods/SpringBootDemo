package edu.redwoods.cis18.springdemo.demo.controller;

import edu.redwoods.cis18.springdemo.demo.model.Possessions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import edu.redwoods.cis18.springdemo.demo.model.UserRepository;
import edu.redwoods.cis18.springdemo.demo.model.User;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URLs start with /user (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
    @GetMapping(path="/email")
    public @ResponseBody Iterable<User> getUsersByEmail(@RequestParam String email) {
        // This returns a JSON or XML with the users
        return userRepository.findByEmail(email);
    }

    @GetMapping(path="/possessions")
    public @ResponseBody Iterable<Possessions> getUsersByEmail(@RequestParam Integer user) {
        User n = userRepository.findById(user).orElse(null);
        if( n != null ) {
            // This returns a JSON or XML with the users
            return n.getPossessions();
        }
        return null;
    }
}
