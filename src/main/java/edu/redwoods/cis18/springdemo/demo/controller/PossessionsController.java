package edu.redwoods.cis18.springdemo.demo.controller;

import edu.redwoods.cis18.springdemo.demo.model.User;
import edu.redwoods.cis18.springdemo.demo.model.UserRepository;
import edu.redwoods.cis18.springdemo.demo.model.Possessions;
import edu.redwoods.cis18.springdemo.demo.model.PossessionsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/possession") // This means URLs start with /possessions (after Application path)
public class PossessionsController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private PossessionsRepository possessionsRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewPossession(@RequestParam String name ,
                                                 @RequestParam String description,
                                                 // Below is how you can make a nullable/optional RequestParam.
                                                 @RequestParam(value="itemLabel", required=false) String itemLabel,
                                                 @RequestParam Integer user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = userRepository.findById(user).orElse(null);
        if(n != null) {
            Possessions p = new Possessions();
            p.setUser(n);
            p.setName(name);
            p.setDescription(description);
            p.setItemLabel(itemLabel);
            possessionsRepository.save(p);
            return "Saved";
        }
        return "Invalid User";
    }

    @GetMapping(path="/get")
    public @ResponseBody Iterable<Possessions> getPossessionsByUser(@RequestParam Integer user) {
        // This returns a JSON or XML with the users
        User n = userRepository.findById(user).orElse(null);
        if(n != null) {
            return possessionsRepository.findByUser(n, Sort.by(Sort.Direction.DESC, "id") );
        }
        return null;
    }
}
